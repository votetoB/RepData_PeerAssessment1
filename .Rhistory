else if(nchar(s) < 3){
s<-paste("00", s, sep="")
}
else if(nchar(s)<4){
s<-paste("0",s, sep="")
}
})
sapply(names(mean_by_interval), function(s){
if (nchar(s) < 2){
s<-paste("000", s, sep = "")
}
else if(nchar(s) < 3){
s<-paste("00", s, sep="")
}
else if(nchar(s)<4){
s<-paste("0",s, sep="")
}
})
sapply(names(mean_by_interval), function(s){
if (nchar(s) < 2){
s<-paste("000", s, sep = "")
}
else if(nchar(s) < 3){
s<-paste("00", s, sep="")
}
else if(nchar(s)<4){
s<-paste("0",s, sep="")
}
s
})
x
s
s <- "1122"
?insert
??insert
s[1:3]
s[1]
s[1][1]
s[1][,1]
s[1][2]
s[1]
s[1].1
?string
??string
?copy
??copy
?str
str(1:12)
str(ls)
str(str)
str(freeny)
?paste
strtrim(s)
s
strtrim(s, width =1)
strtrim(s, width =2)
strtrim(s, width =3)
strtrim(s, width =4)
strtrim(s, width=-2)
strtrim(s, width=3)
strtrim(s, width=1:4)
strtrim(s, width=4:4)
strtrim(s, width=3:4)
?strtrim
strtrim(c("abcdef", "abcdef", "abcdef"), c(1,5,10))
?insert substring
?substring
substr(x)
x
s
substr(s, 1, "5")
substr(s, 1, 3)
substr(s, 1,2)
substr(s, 3,5)
substr(s, 3,4)
sapply(names(mean_by_interval), function(s){
if (nchar(s) < 2){
s<-paste("000", s, sep = "")
}
else if(nchar(s) < 3){
s<-paste("00", s, sep="")
}
else if(nchar(s)<4){
s<-paste("0",s, sep="")
}
paste0(substr(s,1,2), ":", submstr(s,2,3))
})
sapply(names(mean_by_interval), function(s){
if (nchar(s) < 2){
s<-paste("000", s, sep = "")
}
else if(nchar(s) < 3){
s<-paste("00", s, sep="")
}
else if(nchar(s)<4){
s<-paste("0",s, sep="")
}
paste0(substr(s,1,2), ":", substr(s,2,3))
})
sapply(names(mean_by_interval), function(s){
if (nchar(s) < 2){
s<-paste("000", s, sep = "")
}
else if(nchar(s) < 3){
s<-paste("00", s, sep="")
}
else if(nchar(s)<4){
s<-paste("0",s, sep="")
}
paste0(substr(s,1,2), ":", substr(s,3,4))
})
labels <- sapply(names(mean_by_interval), function(s){
if (nchar(s) < 2){
s<-paste("000", s, sep = "")
}
else if(nchar(s) < 3){
s<-paste("00", s, sep="")
}
else if(nchar(s)<4){
s<-paste("0",s, sep="")
}
paste0(substr(s,1,2), ":", submstr(s,2,3))
})
labels <- sapply(names(mean_by_interval), function(s){
if (nchar(s) < 2){
s<-paste("000", s, sep = "")
}
else if(nchar(s) < 3){
s<-paste("00", s, sep="")
}
else if(nchar(s)<4){
s<-paste("0",s, sep="")
}
paste0(substr(s,1,2), ":", substr(s,3,4))
})
barplot(mean_by_interval, names.arg = labels)
xyplot(mean_by_interval, names.arg = labels)
plot(mean_by_interval, type = "l")
plot(mean_by_interval, type = "l", axes = "xaxt")
plot(mean_by_interval, type = "l", axes = xaxt)
plot(mean_by_interval, type = "l", axes = "xaxt")
plot(mean_by_interval, type = "l")
axis(1, at = labels)
axis(1, at = labels)
axis(side = 1, at = labels)
labels
vector(labels)
type(labels)
class(labels)
type(labels)[1]
names(labels)
names(labels) <- NULL
labels
axis(side = 1, at = labels)
windows()
plot(mean_by_interval, type = "l")
axis(side = 1, at = labels)
plot(mean_by_interval, type = "n")
plot(mean_by_interval, type = "n")
axis(side = 1, at = labels)
axis.POSIXct(side = 1, x = labels)
axis.POSIXct(side = 1, x = labels, fformat = "%H:%M")
axis.POSIXct(side = 1, x = labels, format = "%H:%M")
axis.POSIXct(side = 1, x = labels,format = "%H:%M")
axis.POSIXct(side = 1, format = "%H:%M")
axis.POSIXct(side = 1, format = "%H:%M", x = labels)
axis.POSIXct(side = 1, format = "%H:%M", x = as.POSIXct(labels)
)
axis.POSIXct(side = 1, format = "%H:%M", x = as.POSIXct(labels, format = "%H:%M"))
plot(mean_by_interval, type = "n")
axis.POSIXct(side = 1, format = "%H:%M", x = as.POSIXct(labels, format = "%H:%M"))
plot(mean_by_interval, type = "l", ann = F)
windows()
plot(mean_by_interval, type = "l", ann = F)
plot(mean_by_interval, type = "l", axes = F)
plot(mean_by_interval, type = "l", axes = T)
plot(mean_by_interval, type = "l", axes = F)
axis(1)
axis(2)
plot(mean_by_interval, type = "l", axes = F)
axis(2)
axis(1, labels = labels)
axis(1, at = seq(1:100), labels = labels)
axis(1, at = seq(1:228), labels = labels)
axis(1, at = seq(1:288), labels = labels)
plot(mean_by_interval, type = "l", yaxt = T)
plot(mean_by_interval, type = "l", xaxt = T)
plot(mean_by_interval, type = "l", yaxt = F)
plot(mean_by_interval, type = "l", xaxt="n")
splited_by_interval
length(splited_by_interval )
activity_data
splited_by_interval
for (i in splited_by_interval){print (i)}
splited_by_interval[1,]
splited_by_interval[1]
splited_by_interval[1][1]
(splited_by_interval[1])[1]
df(splited_by_interval)
data.frame(splited_by_interval)
df <- data.frame(splited_by_interval)
df
df$X0
df[,1]
df[1]
df[, 1]
splited_by_interval
splited_by_interval[1]
splited_by_interval[1]
splited_by_interval[1][2]
splited_by_interval[1]
splited_by_interval[1][[1]]
splited_by_interval[[1]]
splited_by_interval[[23]]
splited_by_interval[["1"]
]
splited_by_interval[["5"]
]
splited_by_interval[["5"]]
splited_by_interval[["5"]][1]
splited_by_interval[["5"]][2]
splited_by_interval <- data.frame(splite_by_interval)
splited_by_interval <- data.frame(splited_by_interval)
splited_by_interval[,1]
splited_by_interval[1,1]
splited_by_interval[1,]
nrow(splited_by_interval)
ncol(splited_by_interval)
splited_by_interval[1,]
splited_by_interval[1,]
splited_by_interval[1,1]
splited_by_interval[2,1]
splited_by_interval[3,1]
head(splited_by_interval)
View(activity_data)
activity_daya[1,3]
activity_data[1,3]
activity_data[1,4]
activity_data[1,5]
activity_data[1,3]
activity_data[2,3]
activity_data[2,1]
splited_by_interval
splited_by_interval[1,1]
splited_by_interval[1,2]
for (i in 1:ncol(splited_by_interval)){
for (j in 1:nrow(splited_by_interval)){
new_data[(i-1) * 288 + j, 1] <- splited_by_interval[i, j]
}
}
new_data <- activity_data
for (i in 1:ncol(splited_by_interval)){
for (j in 1:nrow(splited_by_interval)){
new_data[(i-1) * 288 + j, 1] <- splited_by_interval[i, j]
}
}
head(new_data)
new_data
head(new_data)
new_data[1, 3]
new_data[1, 1]
splited_by_interval[1,1]
for (i in 1:ncol(splited_by_interval)){
if (is.na(splited_by_interval[1,i])){splited_by_interval[1,i] <- splited_by_interval[2, i]}
for (j in 2:nrow(splited_by_interval)){
if (is.na(splited_by_interval[j, i])){
if (is.na(splited_by_interval[j + 1, i])){
splited_by_interval[j, i] <- splited_by_interval[j-1, i]
}
else{
splited_by_interval[j, i] <- (splited_by_interval[j-1, i] + splited_by_interval[j+1, i])/2
}
}
}
}
splited_by_interval[1,1]
for (i in 1:ncol(splited_by_interval)){
for (j in 1:nrow(splited_by_interval)){
new_data[(i-1) * 288 + j, 1] <- splited_by_interval[i, j]
}
}
head(new_data)
weekdays()
weekdays(1)
weekdays(new_data$date)
new_data$date
weekdays(new_data$date[1])
weekdays(as.Date(new_data$date)
)
library(knitr)
weekdays(as.Date(new_data$date)) == "Sunday"
factor
factor(1)
factor("1", "2")
factor(1, "2")
factor("2", "2")
factor(c(1:5))
factor(c(1:5, 1:5))
gamma <- factor(c(1:5, 1:5))
gamma
class(gamma)
factor(weekdays(as.Date(new_data$date)))
function is_weekend(s){
if (s == "Sunday" || s == "Saturday"){
return T
}
}
function is_weekend(s){
if (s == "Sunday" || s == "Saturday"){
return T
}
else{
return F
}
}
function is_weekend(s){
if (s == "Sunday" || s == "Saturday"){
return T
}
else{
return F
}
}
function is_weekend(s){
if (s == "Sunday" || s == "Saturday"){
return T
}
else{
return F
}
}
home <- function is_weekend(s){
if (s == "Sunday" || s == "Saturday"){
return T
}
else{
return F
}
}
home
is_weekend <- function (s){
if (s == "Sunday" || s == "Saturday"){
return T
}
else{
return F
}
}
is_weekend <- function (s){
if (s == "Sunday" || s == "Saturday"){
return T
}
else{
return F
}
}
is_weekend <- function (s){
if (s == "Sunday" || s == "Saturday"){
return T
}
else{
return F
}
}
is_weekend <- function (s){
if (s == "Sunday" || s == "Saturday"){
TRUE
}
else{
FALSE
}
}
is_weekend(weekdays(as.Date(new_data$date)))
is_weekend <- function (s){
if (s == "Sunday" | s == "Saturday"){
TRUE
}
else{
FALSE
}
}
is_weekend(weekdays(as.Date(new_data$date)))
is_weekend <- function (s){
if (s == "Sunday" || s == "Saturday"){
TRUE
}
else{
FALSE
}
}
sapply(weekdays(as.Date(ned_data$date)), is_weekend)
sapply(weekdays(as.Date(ned_data$date)), is_weekend)
sapply(weekdays(as.Date(new_data$date)), is_weekend)
is_weekend <- function (s){
if (s == "Sunday" | s == "Saturday"){
TRUE
}
else{
FALSE
}
}
sapply(weekdays(as.Date(new_data$date)), is_weekend)
```{r}
is_weekend <- function (s){
if (s == "Sunday" || s == "Saturday"){
TRUE
}
else{
FALSE
}
}
w <- "Sunday"
if (w == "Sunday" || w == "Saturday"){1}
if (w == "Sunday" || w == "Saturday"){1}
w <- "Saturday"
if (w == "Sunday" || w == "Saturday"){1}
is_weekend <- function (s){
if ((s == "Sunday") || (s == "Saturday")){
TRUE
}
else{
FALSE
}
}
sapply(weekdays(as.Date(new_data$date)), is_weekend)
head(weekdays(as.Date(new_data$date)))
tapply(weekdays(as.Date(new_data$date)), is_weekend)
apply(weekdays(as.Date(new_data$date)), is_weekend)
apply(weekdays(as.Date(new_data$date)), 2, is_weekend)
rapply(weekdays(as.Date(new_data$date)), is_weekend)
classs(weekdays(as.Date(new_data$date)), is_weekend)
class(weekdays(as.Date(new_data$date)), is_weekend)
class(weekdays(as.Date(new_data$date)))
tapply(weekdays(as.Date(new_data$date)))
tapply(weekdays(as.Date(new_data$date)), INDEX = 1, FUN = is_weekend())
tapply(weekdays(as.Date(new_data$date)), INDEX = 1, FUN = is_weekend
)
tapply(weekdays(as.Date(new_data$date)), INDEX = ned_data$date, FUN = is_weekend
_
tapply(weekdays(as.Date(new_data$date)), INDEX = ned_data$date, FUN = is_weekend)
tapply(weekdays(as.Date(new_data$date)), INDEX = new_data$date, FUN = is_weekend)
tapply(weekdays(as.Date(new_data$date)), INDEX = new_data$date, FUN = is_weekend)
aaa <- tapply(weekdays(as.Date(new_data$date)), INDEX = new_data$date, FUN = is_weekend)
dim(aaa)
is_weekend <- function (s){
if ((s == "Sunday") || (s == "Saturday")){
"weekend"
}
else{
"weekday"
}
}
aaa <- tapply(weekdays(as.Date(new_data$date)), INDEX = new_data$date, FUN = is_weekend)
aaa
factor(aaa)
new_data$weekday <- factor(aaa)
new_data$date
aaa <- factor(aaa)
aaa
aaa[new_data$date[1]]
aaa[new_data$date[2]]
aaa[new_data$date[7]]
aaa[new_data$date[115]]
aaa[new_data$date[5556]]
aaa[new_data$date]
new_date$weekend <- aaa[new_data$date]
new_data$weekend <- aaa[new_data$date]
new_data
weekdays(as.Date(new_data$date[2500]))
nrow(splited_by_interval)
ncol(splited_by_interval)
1:3
1:3
1 + 1: 1+ 2
(1 + 1): (1+ 2)
new_data
new_data[1:60, 1]
new_data[1:61, 1]
new_data[1:62, 1]
new_data[1:61, 1]
source('~/.active-rstudio-document', echo=TRUE)
new_data
splited_by_interval
splited_by_interval[complete.cases(splited_by_interval)]
splited_by_interval[complete.cases(splited_by_interval) == F]
ncol(splited_by_interval)
splited_by_interval[1, 1:n]
new_data[((i-1)*m + 1):((i-1)*m + n), 1] == splited_by_interval[i, 1:n]
i
i <- 2
new_data[((i-1)*m + 1):((i-1)*m + n), 1] == splited_by_interval[i, 1:n]
new_data[((i-1)*m + 1):((i-1)*m + n), 1] <- splited_by_interval[i, 1:n]
new_data[((i-1)*m + 1):((i-1)*m + n), 1]
splited_by_interval[i, 1:n]
c()plited_by_interval[i, 1:n]
c(plited_by_interval[i, 1:n])
c(splited_by_interval[i, 1:n])
splited_by_interval[i, 1:n]
data.frame(splited_by_interval[i, 1:n])
new_data[((i-1)*m + 1):((i-1)*m + n), 1]
class(new_data[((i-1)*m + 1):((i-1)*m + n), 1])
class(new_data[((i-1)*m + 1):((i-1)*m + n), 1])
row(new_data[((i-1)*m + 1):((i-1)*m + n), 1])
new_data[((i-1)*m + 1):((i-1)*m + n), 1]
new_data[((i-1)*m + 1):((i-1)*m + n), 1]
splited_by_interval[i, 1:n]
splited_by_interval[i, 1:n][[1]]
splited_by_interval[i,]
splited_by_interval[i,1:n]
n
View(splited_by_interval)
View(new_data)
